---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  PYTHON_BIN: python3
  ANSIBLE_LINT_FILE: "{{.ANSIBLE_DIR}}/.ansible-lint"
  ANSIBLE_INVENTORY_FILE: "{{.ANSIBLE_DIR}}/inventory/hosts.yaml"
  ANSIBLE_REQUIREMENTS_FILE: "{{.ANSIBLE_DIR}}/requirements.yaml"
  ANSIBLE_PIP_REQUIREMENTS_FILE: "{{.ANSIBLE_DIR}}/requirements.txt"

env:
  PATH: "{{.ROOT_DIR}}/.venv/bin:$PATH"
  VIRTUAL_ENV: "{{.ROOT_DIR}}/.venv"
  ANSIBLE_COLLECTIONS_PATH: "{{.ROOT_DIR}}/.venv/galaxy"
  ANSIBLE_ROLES_PATH: "{{.ROOT_DIR}}/.venv/galaxy/ansible_roles"
  ANSIBLE_VARS_ENABLED: "host_group_vars"
  ANSIBLE_LOCALHOST_WARNING: "False"
  ANSIBLE_INVENTORY_UNPARSED_WARNING: "False"

tasks:

  venv:
    desc: Set up Python virtual environment
    cmds:
      - true && {{.PYTHON_BIN}} -m venv {{.ROOT_DIR}}/.venv
      - .venv/bin/python3 -m pip install --upgrade pip setuptools wheel
      - .venv/bin/python3 -m pip install --upgrade --requirement {{.ANSIBLE_DIR}}/requirements.txt
      - .venv/bin/ansible-galaxy install --role-file "{{.ANSIBLE_DIR}}/requirements.yaml" --force
    sources:
      - "{{.ANSIBLE_DIR}}/requirements.txt"
      - "{{.ANSIBLE_DIR}}/requirements.yaml"
    generates:
      - "{{.ROOT_DIR}}/.venv/pyvenv.cfg"

  run:
    desc: Run an Ansible playbook for configuring a cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        playbook: Playbook to run (required)
    prompt: Run Ansible playbook '{{.playbook}}' against the '{{.cluster}}' cluster ... continue?
    deps: ["venv"]
    cmd: |
      .venv/bin/ansible-playbook \
        --inventory {{.ANSIBLE_DIR}}/{{.cluster}}/inventory/hosts.yaml \
        {{.ANSIBLE_DIR}}/{{.cluster}}/playbooks/{{.playbook}}.yaml {{.CLI_ARGS}}
    requires:
      vars: ["cluster", "playbook"]
    preconditions:
      - test -d {{.ROOT_DIR}}/.venv
      - test -f {{.ANSIBLE_DIR}}/{{.cluster}}/inventory/hosts.yaml
      - test -f {{.ANSIBLE_DIR}}/{{.cluster}}/playbooks/{{.playbook}}.yaml

  poweroff:
    desc: Shutdown all the k8s nodes
    deps: ["deps"]
    cmd: ".venv/bin/ansible kubernetes --inventory {{.ANSIBLE_INVENTORY_FILE}} -a '/usr/bin/systemctl poweroff' --become"
    preconditions:
      - { msg: "Missing Ansible inventory file", sh: "test -f {{.ANSIBLE_INVENTORY_FILE}}" }

  list:
    desc: List all the hosts
    deps: ["deps"]
    cmd: ".venv/bin/ansible kubernetes --inventory {{.ANSIBLE_INVENTORY_FILE}} --list-hosts"
    preconditions:
      - { msg: "Missing Ansible inventory file", sh: "test -f {{.ANSIBLE_INVENTORY_FILE}}" }

  ping:
    desc: Ping all the hosts
    deps: ["deps"]
    cmd: ".venv/bin/ansible kubernetes --inventory {{.ANSIBLE_INVENTORY_FILE}} --one-line -m 'ping'"
    preconditions:
      - { msg: "Missing Ansible inventory file", sh: "test -f {{.ANSIBLE_INVENTORY_FILE}}" }

  uptime:
    desc: Uptime of all the hosts
    deps: ["deps"]
    cmd: ".venv/bin/ansible kubernetes --inventory {{.ANSIBLE_INVENTORY_FILE}} --one-line -a 'uptime'"
    preconditions:
      - { msg: "Missing Ansible inventory file", sh: "test -f {{.ANSIBLE_INVENTORY_FILE}}" }

  lint:
    desc: Lint Ansible
    deps: ["deps"]
    cmd: ".venv/bin/ansible-lint --config-file {{.ANSIBLE_LINT_FILE}} {{.ANSIBLE_DIR}}/**/*.yaml"
    preconditions:
      - { msg: "Missing Ansible lint file", sh: "test -f {{.ANSIBLE_LINT_FILE}}" }

  .reset:
    internal: true
    cmd: rm -rf {{.ANSIBLE_DIR}}
